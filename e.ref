* E.REF  file
* Evaluator of Refal expressions
* To use module PROG with the Evaluator, add to it:
* $ENTRY UpD {e.X = <Up e.X>;}
* Call: 
*     refgo e+PROG ...
* or
*     reftr e+PROG ...
* (dots indicate possible additional modules).

$ENTRY Go { =  <Job>; }
Job { = <Prout 'Type expression to evaluate. To end: empty line. '>
        <Prout 'To end session: empty expression'>
        <Prout >
        <Check-end <Inp-met>>; }

Check-end {
     = <Prout 'End of session'>;
  '*'Error = <Job>;
  e.X = <Out <UpD e.X>>; }

Out {e.X = <Prout 'The result is:'>
           <Prout e.X> <Prout>
           <Job>; }

$EXTRN UpD;

Inp-met { =  
	<Parse ('$') <Read-in <Card>>>;  }

* Read in cards until EOF or empty line
Read-in {
   = ;
  0 = ;
  e.1 = ' 'e.1 <Read-in <Card>>; }

* Convert characters into Refal objects	in metacode
Parse {
  (e.1) ' '  e.2  =  <Parse (e.1) e.2>;
  (e.1) '\t' e.2  =  <Parse (e.1) e.2>;
  (e.1) '('  e.2  =  <Parse ((e.1)) e.2>;
  ((e.1)e.2) ')'e.3  =  <Parse (e.1(e.2)) e.3>;
  ('$'e.1) ')'e.3  = <Prout> '*'Error 
	             <Prout '*** ERROR: Unbalanced \')\' in input'>
                     <Prout e.1 ')'>;
  (e.1) '<' e.2  =  <Parse ((e.1'*')) e.2>;

  ((e.1'*')s.F e.2) '>'e.3, <Checkf s.F>: 
        {Mul, e.2: 'V'e.4 = <Parse (e.1 ('!' Mul e.4)) e.3>;
         s.F1  =  <Parse (e.1 ('!' s.F1 e.2)) e.3>;
          = <Prout> '*'Error
            <Prout 'Invalid function name ' s.F>;
        };

  ((e.1'*') e.2) '>'e.3  =  <Prout> '*'Error
           <Prout '*** ERROR: No function name in input'>
           <Prout e.1 '*(?????'>;
  ('$'e.1) '>'e.3  = <Prout> '*'Error 
		<Prout '*** ERROR: Unbalanced \'>\' in input'>
		<Prout e.1 '>'>;
  (e.1) '*'e.2 = <Parse (e.1'*V') e.2>;

  (e.1) '\''e.2  =  <Quotes Parse '\''(e.1) e.2>;
  (e.1) '\"'e.2  =  <Quotes Parse '\"'((e.1)) e.2>;
  (e.1) '\\' e.2, e.2: 
         { 'x' s.d1 s.d2 e.3, <Hex s.d1 s.d2>: s.hex
                                       = <Parse (e.1 s.hex)e.3>;
           s.A e.3, <Escape s.A>: s.A1 = <Parse (e.1 s.A1)e.3>;
           e.3 =  <Prout> '*'Error
	      <Prout '*** ERROR: Unexpected escape sequnce in input'>
	      <Prout '*** 'e.1> <Prout '*** ''\\' e.3>;
         };
  (e.1) s.A e.2  =  <Parse1 (e.1) (<Type s.A>) s.A e.2>;
  ('$'e.1)  = e.1;
  ((e.1)e.2) =  <Prout> '*'Error
	        <Prout '*** ERROR: Unbalanced \'(\' or \'<\' in input'>	
	        <Prout-lm (e.1)e.2>;  }

* Check function name
Checkf {
  '+' = Add;
  '-' = Sub;
  '*' = Mul;
  '/' = Div;
  s.F, <Type s.F>: 'Wi' e.F1 = s.F;
  s.F = ; }  

* Print out a left multibracket
Prout-lm {
  (e.1'*')e.2 = <Prout-lm e.1> <Prout '*** *(' e.2>;
  (e.1)   e.2 = <Prout-lm e.1> <Prout '*** (' e.2>;
  '$'     e.1 = <Prout '*** ' e.1>;  }

* Inside escape.
Escape {
 '\\' = '\\'; 'n' = '\n';
 'r' = '\r'; 't' = '\t';
 '\'' = '\''; '\"' = '\"';
 '(' = '\('; ')' = '\)';
 '<' = '\<'; '>' = '\>';
  e.3 = ;
}

* Inside quotes
Quotes {
  s.Fun s.Q (e.1) '\\' e.2 , e.2: 
         { 'x' s.d1 s.d2 e.3, <Hex s.d1 s.d2>: s.hex
                                       = <Quotes s.Fun s.Q(e.1 s.hex)e.3>;
           s.A e.3, <Escape s.A>: s.A1 = <Quotes s.Fun s.Q(e.1 s.A1)e.3>;
           e.3 =  <Prout> '*'Error
	      <Prout '*** ERROR: Unexpected escape sequnce in input'>
	      <Prout '*** 'e.1> <Prout '*** ''\\' e.3>;
         };

  s.Fun '\'' (e.1)       '\'' e.2 = <Mu s.Fun (e.1) e.2>;
  s.Fun '\"' ((e.0) e.1) '\"' e.2 = <Mu s.Fun (e.0 <Implode_Ext e.1>)e.2>;
  s.Fun s.Q  (e.1) EOF = <QuotesError s.Q (e.1)>;
  s.Fun '\'' (e.1) '*' e.2 = <Quotes s.Fun '\'' (e.1 '*V') e.2>;
  s.Fun s.Q  (e.1) s.A e.2 = <Quotes s.Fun s.Q (e.1 s.A) e.2>;
  s.Fun s.Q  (e.1) = <QuotesError s.Q (e.1)>;
      };

QuotesError {
 s.Q  (e.1) = <Prout> '*'Error
	      <Prout '*** ERROR: Unbalanced quote in input'>
              <Prout '*** 'e.1> <Prout '*** 's.Q>;
}
 
Hex {
 s.d1 s.d2, <Hex s.d1>: s.h1, <Hex s.d2>: s.h2 
     = <Chr <Add (<Mul s.h1 16>) s.h2>>;

 s.h, <Type s.h>: 'D' e.D1 = s.h;
 'A' = 10;  'a' = 10; 'B' = 11;  'b' = 11;
 'C' = 12;  'c' = 12; 'D' = 13;  'd' = 13;
 'E' = 14;  'e' = 14; 'F' = 15;  'f' = 15; 
  e.hs = ;
}

* Go on parsing after the type of the character computed
Parse1 {
  (e.1) ('L' e.A1) s.A e.2  =  <Word (e.1) (s.A) e.2>;
  (e.1) ('D' e.A1) s.A e.2  =  <Number (e.1) (s.A) e.2>;
  (e.1) (s.T e.A1) s.A e.2  =  <Parse (e.1 s.A) e.2>;  }

Word {
  (e.1) (e.W) s.B e.2, <Type s.B>:
	{ 'L' e.B1 = <Word (e.1) (e.W s.B) e.2>;
	  'D' e.B1 = <Word (e.1) (e.W s.B) e.2>;
	  'Ol-'  = <Word (e.1) (e.W'-') e.2>;
	  'Ou_'  = <Word (e.1) (e.W'_') e.2>;
	  s.T e.B1  = <Parse (e.1 <Implode_Ext e.W>) s.B e.2>;
	};
  (e.1) (e.W)  =  <Parse (e.1 <Implode_Ext e.W>)>;  }

Number {
  (e.1)(e.N) s.X e.2, <Type s.X>: 'D' e.X1 =
                   <Number (e.1)(e.N s.X) e.2>;
  (e.1)(e.N) e.X = <Parse (e.1 <Numb e.N>) e.X>;
       }


