* MBPREP is MultiBracket PREProcessor
* It scans a Refal program for usage of [] and [. .],
* and translates it into basic Refal.
* Use: refgo mbprep FILE-FROM FILE-TO 

$ENTRY Go {  =  <Open 'r' 1 <Arg 1>>	
		<Open 'w' 2 <Arg 2>>
		<Mbprep <Next>>  
  	  };
Next { ,<Get 1>: {'*'e.1 = <Putz 2 '*'e.1> <Next>;
                     e.1 = e.1 }
     };
Mbprep {
	0 = ;
	e.1, <Lookm0 e.1>: {(e.A)'['e.B  =  
			           <Out e.A <Lookp (( '[' ))( e.B )> >;
			     e.1 = <Putz 2 e.1> <Mbprep <Next>>;
                           };
	};
* Lookm0 detects "[", maybe a part of a string
Lookm0 {e.1 '[' e.2  = <Lookm ()e.1 '[' e.2>;
        e.1  =  e.1};
* LOOK for opening Multibracket [
Lookm {
	(e.1)'['e.2  =  (e.1)'['e.2;

	(e.1) '\"'e.2, <Quotes '\"' () e.2>: (e.0) e.3 = <Lookm (e.1 e.0) e.3>;
	(e.1) '\''e.2, <Quotes '\'' () e.2>: (e.0) e.3 = <Lookm (e.1 e.0) e.3>;
	(e.1) '/*'e.2'*/' e.3 = <Lookm (e.1 '/*'e.2'*/') e.3>;

	(e.1)t.A e.2  =  <Lookm (e.1 t.A) e.2>;
	(e.1)  = e.1;
	};
* LOOK for the Pair of the multibracket and call Transl.
* Strings and comments are parenthesized.
Lookp {
* 	[ e.1 ^ '['e.2 .]  =  <Lookp [ e.1('[' ^e.2 .]>;
 	(e.ML( e.1 ))( '['e.2 )  =  <Lookp (e.ML( e.1)('[' ))(e.2 )>;
*	[. '['e.1 ^ ']'e.2 .]  =  <Transl [. ^ '['e.1']' .]> e.2;
	(( '['e.1 ))( ']'e.2 ) =  <Transl (( ))( '['e.1']' )> e.2;
*	[ e.1('['e.2 ^ ']'e.3 .]  =  
*		<Lookp [ e.1 <Transl [. ^ '['e.2']' .]> ^ e.3 .]>;	
	(e.ML( e.1)('['e.2 ))( ']'e.3 )  =  
		<Lookp (e.ML( e.1 <Transl (( ))( '['e.2']' )> ))( e.3 )>;	

	(e.L(e.1))( '\"'e.2), <Quotes '\"' () e.2>: (e.0) e.3 
                                      = <Lookp (e.L(e.1 (e.0)))( e.3)>;
	(e.L(e.1))( '\''e.2), <Quotes '\'' () e.2>: (e.0) e.3 
                                      = <Lookp (e.L(e.1 (e.0)))( e.3)>;
	(e.L(e.1))( '/*'e.2'*/' e.3 ) =  <Lookp (e.L(e.1 ('/*'e.2'*/')))( e.3)>;

	(e.L(e.1))( 0 )  =  <Ermes  'ERROR: No pair for ['>;
	(e.L(e.1))(s.A e.2 )  =  <Lookp (e.L(e.1 s.A))( e.2)>;
	(e.L(e.1))( ) =  <Lookp (e.L(e.1 ".EOL."))( <Next>)>;
	};

* Inside quotes
Quotes {
  s.Q (e.1) e.0 '\\' '\\' e.2 = <Quotes s.Q(e.1 e.0 '\\' '\\')e.2>;
  s.Q (e.1) e.0 '\\' s.Q  e.2 = <Quotes s.Q(e.1 e.0 '\\' s.Q )e.2>;
  s.Q (e.1) e.0 s.Q e.2 = (s.Q e.1 e.0 s.Q) e.2;
  s.Q (e.1) e.2 = (s.Q) e.1 e.2;
      };

* Out the translated part. The last line may include new '['.
Out {
	e.1 ".EOL." e.2  = <Putz 2 <Elpar e.1>> <Out e.2>;
	e.1  =  <Mbprep <Elpar e.1>>;
     };

* ELiminate PARentheses around strings
Elpar {
	e.1(e.2)e.3  = e.1 e.2 <Elpar e.3>;
	e.1  = e.1;
      };
* TRANSLate the subexpression using []
Transl {
*	[. ^ '[.'e.1 .]  =  <Transl [. '((' ^ e.1 .]>;
	(( ))( '[.'e.1 )  =  <Transl (( '((' ))( e.1 )>;
*	[. ^ '['e.1 .]  =  <Transl [. '(e.ML(' ^ e.1 .]>;
	(( ))( '['e.1 )  =  <Transl (( '(e.ML(' ))( e.1 )>;
*	[ e.1 ^ '('e.2 .]  =  <Transl [e.1 ( ^ e.2 .]>;
	(e.ML( e.1 ))( '('e.2 )  =  <Transl (e.ML(e.1 )( ))( e.2 )>;
*	[ e.1(e.2 ^ ')'e.3 .]  =  <Transl [ e.1'('e.2')' ^ e.3 .]>;
	(e.ML( e.1)(e.2 ))( ')'e.3 )  =  <Transl (e.ML( e.1'('e.2')' ))( e.3 )>;
*	[. e.1 ^ ')' e.3 .]  =  
*		<Ermes  'ERROR: Unbalanced right parenth. before ^'>;
	(( e.1 ))( ')' e.3 )  =  
		<Ermes  'ERROR: Unbalanced right parenth. before ^'>;
*	[ e.1 ^ ']' .]  =  <Ermes  'ERROR: No pointer'>;
	(e.ML( e.1 ))( ']' )  =  <Ermes  'ERROR: No pointer'>;
*	[ e.1 ^ '^'e.2 .]  =  
*		<Trlmb e.ML(e.1)> '))(' <Transla [. ^ e.2 .]>;
	(e.ML( e.1 ))( '^'e.2 )  =  
		<Trlmb e.ML(e.1)> '))(' <Transla (( ))( e.2 )>;
*	[ e.1 ^ t.A e.2 .]  =  <Transl [ e.1 t.A ^ e.2 .]>;
	(e.ML( e.1 ))( t.A e.2 )  =  <Transl (e.ML( e.1 t.A ))( e.2 )>;
	};
* TRANSLate After the pointer ^
Transla {
*	[ e.1 ^ '('e.2 .]  =  <Transla [e.1 ( ^ e.2 .]>;
	(e.ML( e.1 ))( '('e.2 )  =  <Transla (e.ML(e.1 )( ))( e.2 )>;
*	[ e.1(e.2 ^ ')'e.3 .]  =  <Transla [ e.1'('e.2')' ^ e.3 .]>;
	(e.ML( e.1)(e.2 ))( ')'e.3 )  =  <Transla (e.ML( e.1'('e.2')' ))( e.3 )>;
*	[. e.1 ^ ')'e.2 .]  = <Transla [. e.1 ')(' ^ e.2 .]>;
	(( e.1 ))( ')'e.2 )  = <Transla (( e.1 ')(' ))( e.2 )>;
*	[. e.1 ^ '.]' .]  =  e.1 ')';
	(( e.1 ))( '.]' )  = e.1 ')';
*	[. e.1 ^ ']' .]  =  e.1 ')e.MR';
	(( e.1 ))( ']' )  =  e.1 ')e.MR';
*	[ e.1 ^ ']' .]  =  
*		<Ermes  'ERROR: Unbalanced left parenth. after pointer'>;
	(e.ML( e.1 ))( ']' )  =  
		<Ermes  'ERROR: Unbalanced left parenth. after pointer'>;
*	[ e.1 ^ t.A e.2 .]  =  <Transla [ e.1 t.A ^ e.2 .]>;
	(e.ML( e.1 ))( t.A e.2 )  =  <Transla (e.ML( e.1 t.A ))( e.2 )>;
	};
* TRanslate Left MultiBracket
Trlmb {
	(e.1)(e.2)e.L  = e.1 ')(' <Trlmb (e.2)e.L>;
	(e.1)  =  e.1
	};
* Putz destroys its argument after outputting
Putz { s.C e.E  =  <Destroy <Put s.C e.E>>};
Destroy {e.E  =  };
* Send ERror MESsage
Ermes {e.X = <Prout <Put 2 e.X>> };
